// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListTasksParams creates a new ListTasksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListTasksParams() *ListTasksParams {
	return &ListTasksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListTasksParamsWithTimeout creates a new ListTasksParams object
// with the ability to set a timeout on a request.
func NewListTasksParamsWithTimeout(timeout time.Duration) *ListTasksParams {
	return &ListTasksParams{
		timeout: timeout,
	}
}

// NewListTasksParamsWithContext creates a new ListTasksParams object
// with the ability to set a context for a request.
func NewListTasksParamsWithContext(ctx context.Context) *ListTasksParams {
	return &ListTasksParams{
		Context: ctx,
	}
}

// NewListTasksParamsWithHTTPClient creates a new ListTasksParams object
// with the ability to set a custom HTTPClient for a request.
func NewListTasksParamsWithHTTPClient(client *http.Client) *ListTasksParams {
	return &ListTasksParams{
		HTTPClient: client,
	}
}

/* ListTasksParams contains all the parameters to send to the API endpoint
   for the list tasks operation.

   Typically these are written to a http.Request.
*/
type ListTasksParams struct {

	/* Limit.

	   The number of tasks to return
	*/
	Limit *int64

	// Name.
	Name *string

	/* Offset.

	   The number of tasks to skip
	*/
	Offset *int64

	// Sort.
	Sort []string

	// Status.
	Status *string

	// Type.
	Type *string

	// UserID.
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTasksParams) WithDefaults() *ListTasksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTasksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list tasks params
func (o *ListTasksParams) WithTimeout(timeout time.Duration) *ListTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list tasks params
func (o *ListTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list tasks params
func (o *ListTasksParams) WithContext(ctx context.Context) *ListTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list tasks params
func (o *ListTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list tasks params
func (o *ListTasksParams) WithHTTPClient(client *http.Client) *ListTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list tasks params
func (o *ListTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the list tasks params
func (o *ListTasksParams) WithLimit(limit *int64) *ListTasksParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list tasks params
func (o *ListTasksParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the list tasks params
func (o *ListTasksParams) WithName(name *string) *ListTasksParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list tasks params
func (o *ListTasksParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the list tasks params
func (o *ListTasksParams) WithOffset(offset *int64) *ListTasksParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list tasks params
func (o *ListTasksParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the list tasks params
func (o *ListTasksParams) WithSort(sort []string) *ListTasksParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list tasks params
func (o *ListTasksParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithStatus adds the status to the list tasks params
func (o *ListTasksParams) WithStatus(status *string) *ListTasksParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list tasks params
func (o *ListTasksParams) SetStatus(status *string) {
	o.Status = status
}

// WithType adds the typeVar to the list tasks params
func (o *ListTasksParams) WithType(typeVar *string) *ListTasksParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list tasks params
func (o *ListTasksParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUserID adds the userID to the list tasks params
func (o *ListTasksParams) WithUserID(userID *string) *ListTasksParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the list tasks params
func (o *ListTasksParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *ListTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListTasks binds the parameter sort
func (o *ListTasksParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: ""
	sortIS := swag.JoinByFormat(sortIC, "")

	return sortIS
}
